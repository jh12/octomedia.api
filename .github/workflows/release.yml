name: Release
on:
  push:
    tags:
      - v*

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Get version tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@master
      # Alpha branch
      - name: Docker alpha publish
        if: github.event.base_ref == 'refs/heads/alpha'
        run: |
          SEMVER=${{ steps.previoustag.outputs.tag }}
          RELEASE_VERSION="${SEMVER:1}"
          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN}}
          docker build --build-arg RELEASE_VERSION=$RELEASE_VERSION -f OctoMedia.Api/Dockerfile -t docker.pkg.github.com/jh12/octomedia.api/octomedia.api:latest-alpha -t docker.pkg.github.com/jh12/octomedia.api/octomedia.api:$RELEASE_VERSION .
          docker push docker.pkg.github.com/jh12/octomedia.api/octomedia.api
          docker logout docker.pkg.github.com
          dotnet pack ./OctoMedia.Api.DTOs/OctoMedia.Api.DTOs.csproj --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=$RELEASE_VERSION
          dotnet nuget push **/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ secrets.NUGET_SOURCE }}
      # Master branch
      - name: Docker master publish
        if: github.event.base_ref == 'refs/heads/master'
        run: |
          SEMVER=${{ steps.previoustag.outputs.tag }}
          RELEASE_VERSION="${SEMVER:1}"
          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN}}
          docker build --build-arg RELEASE_VERSION=$RELEASE_VERSION -f OctoMedia.Api/Dockerfile -t docker.pkg.github.com/jh12/octomedia.api/octomedia.api:latest -t docker.pkg.github.com/jh12/octomedia.api/octomedia.api:$RELEASE_VERSION .
          docker push docker.pkg.github.com/jh12/octomedia.api/octomedia.api
          docker logout docker.pkg.github.com
          dotnet pack ./OctoMedia.Api.DTOs/OctoMedia.Api.DTOs.csproj --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=$RELEASE_VERSION
          dotnet nuget push **/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ secrets.NUGET_SOURCE }}
